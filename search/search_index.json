{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Class for listening to prefix data from APRS aprs_connect ( self ) connects to APRS Source code in aprs_prefix/aprs_prefix.py def aprs_connect ( self ): \"\"\"connects to APRS\"\"\" self . ais = aprslib . IS ( \"N0CALL\" , \"13023\" , port = 14580 ) self . ais . set_filter ( \"p/KK6GPV\" ) while True : try : self . ais . connect () self . logger . info ( \"Connected to APRS\" ) self . ais . consumer ( self . unpack_dict , raw = False , immortal = True ) except Exception as e : print ( str ( e )) mongo_connect ( self ) connect to mongo Source code in aprs_prefix/aprs_prefix.py def mongo_connect ( self ): \"\"\"connect to mongo\"\"\" self . client = MongoClient ( os . environ [ \"MONGODB_CLIENT\" ]) self . db = self . client . aprs self . raw = self . db . raw self . logger . info ( \"Connected to Mongo\" ) setup_logging ( self ) initialize logging Source code in aprs_prefix/aprs_prefix.py def setup_logging ( self ): \"\"\"initialize logging\"\"\" self . logger = logging . getLogger ( name = \"aprs-prefix\" ) self . logger . info ( \"Logger started\" ) unpack_dict ( self , d ) function to unpack APRS message Source code in aprs_prefix/aprs_prefix.py def unpack_dict ( self , d ): \"\"\"function to unpack APRS message\"\"\" try : message = dict () message [ \"timestamp_\" ] = datetime . now ( timezone . utc ) message [ \"script\" ] = \"prefix\" for k , v in d . items (): try : for k1 , v1 in v . items (): message [ k + \"_\" + k1 ] = v1 except Exception : try : message [ k ] = v except Exception : message [ k ] = str ( v ) self . raw . insert_one ( message ) self . logger . info ( str ( message )) except Exception as e : self . logger . error ( \"unpack failed\" ) self . logger . error ( str ( e ))","title":"Reference"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#aprs_prefix.aprs_prefix.AprsPrefix","text":"Class for listening to prefix data from APRS","title":"aprs_prefix.aprs_prefix.AprsPrefix"},{"location":"#aprs_prefix.aprs_prefix.AprsPrefix.aprs_connect","text":"connects to APRS Source code in aprs_prefix/aprs_prefix.py def aprs_connect ( self ): \"\"\"connects to APRS\"\"\" self . ais = aprslib . IS ( \"N0CALL\" , \"13023\" , port = 14580 ) self . ais . set_filter ( \"p/KK6GPV\" ) while True : try : self . ais . connect () self . logger . info ( \"Connected to APRS\" ) self . ais . consumer ( self . unpack_dict , raw = False , immortal = True ) except Exception as e : print ( str ( e ))","title":"aprs_connect()"},{"location":"#aprs_prefix.aprs_prefix.AprsPrefix.mongo_connect","text":"connect to mongo Source code in aprs_prefix/aprs_prefix.py def mongo_connect ( self ): \"\"\"connect to mongo\"\"\" self . client = MongoClient ( os . environ [ \"MONGODB_CLIENT\" ]) self . db = self . client . aprs self . raw = self . db . raw self . logger . info ( \"Connected to Mongo\" )","title":"mongo_connect()"},{"location":"#aprs_prefix.aprs_prefix.AprsPrefix.setup_logging","text":"initialize logging Source code in aprs_prefix/aprs_prefix.py def setup_logging ( self ): \"\"\"initialize logging\"\"\" self . logger = logging . getLogger ( name = \"aprs-prefix\" ) self . logger . info ( \"Logger started\" )","title":"setup_logging()"},{"location":"#aprs_prefix.aprs_prefix.AprsPrefix.unpack_dict","text":"function to unpack APRS message Source code in aprs_prefix/aprs_prefix.py def unpack_dict ( self , d ): \"\"\"function to unpack APRS message\"\"\" try : message = dict () message [ \"timestamp_\" ] = datetime . now ( timezone . utc ) message [ \"script\" ] = \"prefix\" for k , v in d . items (): try : for k1 , v1 in v . items (): message [ k + \"_\" + k1 ] = v1 except Exception : try : message [ k ] = v except Exception : message [ k ] = str ( v ) self . raw . insert_one ( message ) self . logger . info ( str ( message )) except Exception as e : self . logger . error ( \"unpack failed\" ) self . logger . error ( str ( e ))","title":"unpack_dict()"}]}